# @generated DO NOT EDIT MANUALLY
# Template is at:    .github/templates/ios_ci_workflow.yml.j2
# Generation script: .github/scripts/generate_ci_workflows.py
name: ios-12-5-1-x86-64-coreml

on:
  push:
    branches:
      - master
      - release/*
    tags:
      - 'ciflow/all/*'
      - 'ciflow/ios/*'
      - 'ciflow/macos/*'
      - 'ciflow/trunk/*'
  workflow_dispatch:

# For setup-miniconda, see https://github.com/conda-incubator/setup-miniconda/issues/179
defaults:
  run:
    shell: bash -x -e -l {0}
env:
  BUILD_ENVIRONMENT: ios-12-5-1-x86-64-coreml
  IN_CI: 1
  IS_GHA: 1
  IOS_PLATFORM: SIMULATOR
  IOS_ARCH: x86_64


jobs:

  build:
    # NOTE: These builds will not run successfully without running on `pytorch/pytorch` due to the limitations
    #       of accessing secrets from forked pull requests and IOS' dependency on secrets for their build/test
    if: ${{ github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository }}
    runs-on: macos-10.15
    timeout-minutes: 240
    env:
      JOB_BASE_NAME: ios-12-5-1-x86-64-coreml-build
      IOS_CERT_KEY_2022: ${{ secrets.IOS_CERT_KEY_2022 }}
      IOS_SIGN_KEY_2022: ${{ secrets.IOS_SIGN_KEY_2022 }}
      IOS_DEV_TEAM_ID: ${{ secrets.IOS_DEV_TEAM_ID }}
      PR_LABELS: ${{ toJson(github.event.pull_request.labels.*.name) }}
    steps:
      - name: print labels
        run: echo "${PR_LABELS}"
      - name: Checkout PyTorch
        uses: zhouzhuojie/checkout@05b13c9a0d21f08f6d5e64a1d5042246d13619d9
        with:
          # deep clone, to allow use of git merge-base
          fetch-depth: 0
          submodules: recursive
      - name: Clean PyTorch checkout
        run: |
          # Remove any artifacts from the previous checkouts
          git clean -fxd
      - name: Setup ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.6
          bundler-cache: true
          working-directory: ios/TestApp/
      # NOTE: the setup-miniconda action takes it upon itself to overwrite the PATH with whatever it thinks is correct
      #       meaning that things like setup-ruby won't actually get setup correctly if run after setup-miniconda
      - name: Setup miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          python-version: 3.8
          activate-environment: build
      - name: Populate CI build options
        run: |
          # Most builds use the lite interpreter, if certain builds shouldn't
          # build the lite interpreter this env variable should get over-written
          # in the following case statement
          echo "BUILD_LITE_INTERPRETER=1" >> "${GITHUB_ENV}"

          case ${BUILD_ENVIRONMENT} in
            *metal*)
              echo "USE_PYTORCH_METAL=1" >> "${GITHUB_ENV}"
              ;;
            *full_jit*)
              echo "BUILD_LITE_INTERPRETER=0" >> "${GITHUB_ENV}"
              ;;
            *custom*)
              echo "SELECTED_OP_LIST=${GITHUB_WORKSPACE}/ios/TestApp/custom_build/mobilenetv2.yaml" >> "${GITHUB_ENV}"
              ;;
            *coreml*)
              echo "USE_COREML_DELEGATE=1" >> "${GITHUB_ENV}"
              ;;
          esac
      - name: Install ios / conda Dependencies
        run: |
          # Install dependencies
          brew install libtool
          conda install numpy ninja pyyaml mkl mkl-include setuptools cmake cffi requests typing_extensions --yes
      - name: Run Fastlane
        shell: bash -e {0}
        run: |
          set -x
          cd ios/TestApp
          # install fastlane
          gem install bundler && bundle install
          # install certificates
          echo "${IOS_CERT_KEY_2022}" >> cert.txt
          base64 --decode cert.txt -o Certificates.p12
          rm cert.txt
          bundle exec fastlane install_root_cert
          bundle exec fastlane install_dev_cert
          # install the provisioning profile
          PROFILE=PyTorch_CI_2022.mobileprovision
          PROVISIONING_PROFILES=~/Library/MobileDevice/Provisioning\ Profiles
          mkdir -pv "${PROVISIONING_PROFILES}"
          cd "${PROVISIONING_PROFILES}"
          echo "${IOS_SIGN_KEY_2022}" >> cert.txt
          base64 --decode cert.txt -o ${PROFILE}
          rm cert.txt
      - name: Build
        run: |
          export TCLLIBPATH="/usr/local/lib"
          python -VV
          export CMAKE_PREFIX_PATH=${CONDA_PREFIX:-"$(dirname "$(which conda)")/../"}
          scripts/build_ios.sh
      - name: Run Build Test
        run: |
          PROFILE=PyTorch_CI_2022
          # run the ruby build script
          if ! [ -x "$(command -v xcodebuild)" ]; then
            echo 'Error: xcodebuild is not installed.'
            exit 1
          fi
          if [ "${IOS_PLATFORM}" != "SIMULATOR" ]; then
            ruby scripts/xcode_build.rb -i build_ios/install -x ios/TestApp/TestApp.xcodeproj -p "${IOS_PLATFORM}" -c "${PROFILE}" -t "${IOS_DEV_TEAM_ID}"
          else
            ruby scripts/xcode_build.rb -i build_ios/install -x ios/TestApp/TestApp.xcodeproj -p "${IOS_PLATFORM}"
          fi
      - name: Run Simulator Tests
        run: |
          pip3 install --pre torch torchvision torchaudio -f https://download.pytorch.org/whl/nightly/cpu/torch_nightly.html
          # generate models for differnet backends
          cd "${GITHUB_WORKSPACE}/ios/TestApp/benchmark"
          mkdir -p ../models
          if [ "${USE_COREML_DELEGATE}" == 1 ]; then
            pip install coremltools==5.0b5
            pip install six==1.16.0
            python coreml_backend.py
          else
            python trace_model.py
          fi
          if [ "${BUILD_LITE_INTERPRETER}" == 1 ]; then
            echo "Setting up the TestApp for LiteInterpreter"
            ruby setup.rb --lite 1
          else
            echo "Setting up the TestApp for Full JIT"
            ruby setup.rb
          fi
          cd "${GITHUB_WORKSPACE}/ios/TestApp"
          instruments -s -devices
          if [ "${BUILD_LITE_INTERPRETER}" == 1 ]; then
            if [ "${USE_COREML_DELEGATE}" == 1 ]; then
              fastlane scan --only_testing TestAppTests/TestAppTests/testCoreML
            else
              fastlane scan --only_testing TestAppTests/TestAppTests/testLiteInterpreter
            fi
          else
            fastlane scan --only_testing TestAppTests/TestAppTests/testFullJIT
          fi

concurrency:
  group: ios-12-5-1-x86-64-coreml-${{ github.event.pull_request.number || github.sha }}-${{ github.event_name == 'workflow_dispatch' }}
  cancel-in-progress: true
